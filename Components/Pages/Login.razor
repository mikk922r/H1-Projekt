@page "/login"
@rendermode InteractiveServer
@inherits BasePage

@inject DBService DB
@inject NavigationManager Nav

<PageTitle>Login</PageTitle>

<EditForm class="card shadow-sm mx-auto w-fit" Model="loginForm" OnValidSubmit="HandleLogin" FormName="Login">
    <DataAnnotationsValidator />

    <article class="form d-flex flex-column gap-3 p-3">
        <h1 class="fs-3 text-center fw-semibold">Login</h1>

        <div>
            <label class="form-label">Email</label>

            <InputText class="form-control" type="email" placeholder="Email..." @bind-Value="loginForm.Email" />

            <ValidationMessage For="@(() => loginForm.Email)" />
        </div>

        <div>
            <label class="form-label">Adgangskode</label>

            <InputText class="form-control" type="password" placeholder="Adgangskode..." @bind-Value="loginForm.Password" />

            <ValidationMessage For="@(() => loginForm.Password)" />
        </div>

        <div class="d-flex gap-3">
            <button type="submit" class="btn btn-primary w-50">Login</button>

            <NavLink href="/register" class="btn btn-outline-secondary w-50">Registrer</NavLink>
        </div>

        @if (!string.IsNullOrEmpty(error))
        {
            <p class="alert alert-danger mb-0 p-2">@error</p>
        }
    </article>
</EditForm>

@code {
    private LoginForm loginForm = new LoginForm();

    private string error = string.Empty;

    private async Task HandleLogin()
    {
        User? user = await Auth.SignIn(loginForm.Email, loginForm.Password);

        if (user is null)
        {
            error = "Email eller adgangskode er forkert.";

            return;
        }

        Nav.NavigateTo("/");
    }
}