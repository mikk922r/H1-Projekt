@page "/"
@rendermode InteractiveServer
@inherits BasePage

@using Projekt.Models
@using Projekt.Services

@inject DBService DBService
@inject NavigationManager Nav
@inject OrderService OrderService

<PageTitle>Forside</PageTitle>

@* ---------- Success‐besked (vises midt på skærmen) ---------- *@
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success alert-dismissible fade show"
         role="alert"
         style="
           position: fixed;
           top: 50%;
           left: 50%;
           transform: translate(-50%, -50%);
           z-index: 1050;
           width: 80%;
           max-width: 400px;
             ">
        @successMessage
        <button type="button"
                class="btn-close"
                aria-label="Close"
                @onclick="ClearMessage"
                style="position: absolute; top: 8px; right: 8px;">
        </button>
    </div>
}

<div class="row mb-4 align-items-center">
    <div class="col">
        <h2>Dashboard</h2>
    </div>
</div>

<div class="row g-4">
    @if (Auth.IsAuthenticated)
    {
        <!-- Add Product card -->
        <div class="col-md-4">
            <div class="card h-100">
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">Products</h5>
                    <p class="card-text flex-grow-1">Add a new product to the marketplace.</p>
                    <NavLink class="btn btn-success mt-auto" href="/add-product">
                        Add Product
                    </NavLink>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Prompt to login/register -->
        <div class="col-md-4">
            <div class="card h-100 border-warning">
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">Welcome!</h5>
                    <p class="card-text flex-grow-1">
                        You need to be signed in to manage users or add products.
                    </p>
                    <NavLink class="btn btn-primary mt-auto" href="/login">Login</NavLink>
                    <NavLink class="btn btn-outline-secondary mt-2" href="/register">Register</NavLink>
                </div>
            </div>
        </div>
    }
</div>

@* --------------------------------------- *@
@* Display all Products below *@
@* --------------------------------------- *@

@if (products is not null && products.Any())
{
    <h3 class="mt-5">All Products</h3>
    <div class="row row-cols-1 row-cols-md-3 g-4 mt-2">
        @foreach (var p in products)
        {
            <div class="col">
                <div class="card h-100 shadow-sm">
                    @* Hvis et billede findes… *@
                    @if (!string.IsNullOrWhiteSpace(p.Image))
                    {
                        <img src="@p.Image"
                             class="card-img-top"
                             alt="Image of @p.Name"
                             style="object-fit: cover; height: 200px;" />
                    }
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@p.Name</h5>

                        <p class="card-text flex-grow-1">
                            @if (!string.IsNullOrWhiteSpace(p.Description))
                            {
                                @p.Description
                            }
                            else
                            {
                                <em>No description.</em>
                            }
                        </p>

                        <p class="mb-2"><strong>Pris:</strong> @string.Format("{0:C}", p.Price)</p>

                        <p class="mb-2">
                            <strong>Antal:</strong> @p.Quantity
                            @if (p.Used)
                            {
                                <span class="badge bg-secondary">Brugt</span>
                            }
                        </p>

                        <p class="mb-2"><strong>Mærke:</strong> @(!string.IsNullOrWhiteSpace(p.BrandName) ? p.BrandName : "—")</p>
                        <p class="mb-2"><strong>Kategori:</strong> @(!string.IsNullOrWhiteSpace(p.CategoryName) ? p.CategoryName : "—")</p>
                        <p class="mb-2">
                            <strong>Sælger:</strong> @(!string.IsNullOrWhiteSpace(p.UserName) ? p.UserName : "—")
                        </p>

                        <div class="mt-auto d-flex justify-content-between">
                            <button class="btn btn-outline-primary"
                                    @onclick="() => ViewProductDetails(p.Id)">
                                Vis detaljer
                            </button>
                            <button class="btn btn-success"
                                    @onclick="() => AddToOrders(p)">
                                Bestil
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else if (products is not null)
{
    <div class="alert alert-info text-center mt-5">
        Ingen produkter endnu.. Tryk på "Sælg" for at oprette en annonce!
    </div>
}

@code {
    private List<Product>? products;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        // Load all products as soon as Home loads
        products = await DBService.GetAllProductsAsync();
    }

    private void ViewProductDetails(int productId)
    {
        Nav.NavigateTo($"/product-details/{productId}");
    }

    private void AddToOrders(Product p)
    {
        if (!Auth.IsAuthenticated)
        {
            Nav.NavigateTo("/login");
            return;
        }

        OrderService.AddProduct(p);

        // Sæt en kreativ bekræftelses‐besked:
        successMessage = $"🎉 Fantastisk! \"{p.Name}\" er nu i din kurv!";
        StateHasChanged();

        // Kald en async helper, der fjerner beskeden efter 3 sekunder
        _ = ClearSuccessMessageAfterDelay();
    }

    private async Task ClearSuccessMessageAfterDelay()
    {
        await Task.Delay(3000);
        successMessage = null;
        await InvokeAsync(StateHasChanged);
    }

    private void ClearMessage()
    {
        successMessage = null;
    }
}
