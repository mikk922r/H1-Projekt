@page "/"
@rendermode InteractiveServer
@inherits BasePage

@inject DBService DBService
@inject NavigationManager Nav
@inject OrderService OrderService

<PageTitle>Forside</PageTitle>

@* ---------- Success‐besked (vises midt på skærmen) ---------- *@
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success alert-dismissible fade show"
         role="alert"
         style="
               position: fixed;
               top: 50%;
               left: 50%;
               transform: translate(-50%, -50%);
               z-index: 1050;
               width: 80%;
               max-width: 400px;
                 ">
        @successMessage
        <button type="button"
                class="btn-close"
                aria-label="Close"
                @onclick="ClearMessage"
                style="position: absolute; top: 8px; right: 8px;">
        </button>
    </div>
}

<div class="row mb-4 align-items-center">
    <div class="col">
        <h2>Dashboard</h2>
    </div>
</div>

<div class="row g-4">
    @if (Auth.IsAuthenticated)
    {
        <!-- Add Product card -->
        <div class="col-md-4">
            <div class="card h-100">
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">Products</h5>
                    <p class="card-text flex-grow-1">Add a new product to the marketplace.</p>
                    <NavLink class="btn btn-success mt-auto" href="/add-product">
                        Add Product
                    </NavLink>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Prompt to login/register -->
        <div class="col-md-4">
            <div class="card h-100 border-warning">
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title">Welcome!</h5>
                    <p class="card-text flex-grow-1">
                        You need to be signed in to manage users or add products.
                    </p>
                    <NavLink class="btn btn-primary mt-auto" href="/login">Login</NavLink>
                    <NavLink class="btn btn-outline-secondary mt-2" href="/register">Register</NavLink>
                </div>
            </div>
        </div>
    }
</div>

<h1 class="fs-1 my-4">Nyeste Produkter</h1>

@if (!products.Any())
{
    <p class="m-auto fs-3 fw-semibold">Kunne ikke finde nogle produkter...</p>
}
else
{
    <div class="d-flex flex-wrap gap-4">
        @foreach (Product product in products)
        {
            <ProductCard product="product" />
        }
    </div>
}

@code {
    private List<Product> products = new List<Product>();

    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        products = await DBService.GetAllProductsAsync();
    }

    private void ViewProductDetails(int productId)
    {
        Nav.NavigateTo($"/product-details/{productId}");
    }

    private void AddToOrders(Product p)
    {
        if (!Auth.IsAuthenticated)
        {
            Nav.NavigateTo("/login");
            return;
        }

        OrderService.AddProduct(p);

        // Sæt en kreativ bekræftelses‐besked:
        successMessage = $"🎉 Fantastisk! \"{p.Name}\" er nu i din kurv!";
        StateHasChanged();

        // Kald en async helper, der fjerner beskeden efter 3 sekunder
        _ = ClearSuccessMessageAfterDelay();
    }

    private async Task ClearSuccessMessageAfterDelay()
    {
        await Task.Delay(3000);
        successMessage = null;
        await InvokeAsync(StateHasChanged);
    }

    private void ClearMessage()
    {
        successMessage = null;
    }
}
