@page "/product-details/{ProductId:int}"
@rendermode InteractiveServer
@inherits BasePage

@inject DBService DBService
@inject NavigationManager Nav
@inject OrderService OrderService

<PageTitle>Produkt @ProductId</PageTitle>

@if (product is not null)
{
    <div class="d-flex flex-column gap-3 w-75 mx-auto">
        <div class="d-flex justify-content-between">
            <button class="btn btn-outline-secondary" @onclick="NavigateBack">Tilbage</button>

            @if (Auth.IsAuthenticated && Auth.CurrentUser!.Id == product.UserId)
            {
                <button class="btn btn-warning h-fit" @onclick="ToggleEditMode">@(editMode ? "Annullér redigering" : "Rediger produkt")</button>
            }
        </div>

        <div class="d-flex gap-4">
            <ImageShowcase images="GetImages()" />

            <div class="d-flex flex-column w-50 gap-4">
                @if (editMode)
                {
                    <ProductForm Model="editProduct" OnValidSubmit="HandleValidSubmit" FormName="EditProduct" />
                } 
                else
                {
                    <div>
                        <div class="d-flex gap-2 align-items-center">
                            <span class="w-1rem h-1rem color @(ColorHelper.GetColorClass(product.Color)) rounded-circle"></span>

                            <p class="text-body-seconday fs-7">@product.BrandName <span class="opacity-25">•</span> @product.CategoryName</p>
                        </div>

                        <h1 class="fs-2 fw-semibold mt-1 pb-1">@product.Name</h1>

                        @* <div class="d-flex align-items-center gap-2 mt-2">
                            <StarRating rating="4" readOnly />

                            <span class="fs-7">4.2 (42 reviews)</span>
                        </div> *@
                    </div>

                    <h2 class="fw-semibold fs-3">@product.Price.ToString("C", CultureInfo.CurrentCulture)</h2>

                    <div>
                        <p class="text-body-seconday mb-2">@product.Description</p>

                        <div class="d-flex align-items-center gap-2 fs-7">
                            <div class="d-flex align-items-center gap-1">
                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="text-success" aria-hidden="true" role="img" width="16" height="16" viewBox="0 0 24 24">
                                    <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 6L9 17l-5-5"></path>
                                </svg>

                                <span>På lager</span>
                            </div>

                            <hr class="h-1rem" />

                            <div class="d-flex align-items-center gap-1">
                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" width="16" height="16" viewBox="0 0 24 24">
                                    <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                        <path d="M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2m10 0H9m10 0h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14"></path>
                                        <circle cx="17" cy="18" r="2"></circle>
                                        <circle cx="7" cy="18" r="2"></circle>
                                    </g>
                                </svg>

                                <span>Gratis fragt</span>
                            </div>
                        </div>
                    </div>

                    <div>
                        <label class="mb-2">Farve:</label>

                        <ColorSelector @bind-color="editProduct.Color" />
                    </div>

                    <div>
                        <label>Størrelse:</label>

                        <div class="d-flex">

                        </div>
                    </div>

                    <div>
                        <label>Antal:</label>

                        <div class="input-group">
                            <button class="btn btn-outline-secondary d-flex align-items-center" @onclick="() => amount = Math.Max(1, amount - 1)">
                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" width="16" height="16" viewBox="0 0 24 24">
                                    <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14"></path>
                                </svg>
                            </button>

                            <InputNumber class="form-control w-25 flex-grow-0" @bind-Value="amount" min="1" max="100" step="1" />

                            <button class="btn btn-outline-secondary d-flex align-items-center" @onclick="() => amount = Math.Min(100, amount + 1)">
                                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" width="16" height="16" viewBox="0 0 24 24">
                                    <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14m-7-7v14"></path>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <div class="d-flex mt-auto">
                        <button class="btn btn-primary d-flex align-items-center justify-content-center gap-2 w-100" @onclick="AddToCart">
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" focusable="false" width="20" height="20" viewBox="0 0 24 24">
                                <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                    <circle cx="8" cy="21" r="1"></circle>
                                    <circle cx="19" cy="21" r="1"></circle>
                                    <path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12"></path>
                                </g>
                            </svg>

                            Læg i kurv
                        </button>
                    </div>

                    <div class="pt-3 border-top border-1 border-default d-flex gap-4 align-items-center fs-7">
                        <div class="d-flex align-items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" width="16" height="16" viewBox="0 0 24 24">
                                <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                    <path d="M21 12a9 9 0 0 0-9-9a9.75 9.75 0 0 0-6.74 2.74L3 8"></path>
                                    <path d="M3 3v5h5m-5 4a9 9 0 0 0 9 9a9.75 9.75 0 0 0 6.74-2.74L21 16"></path>
                                    <path d="M16 16h5v5"></path>
                                </g>
                            </svg>

                            <span>30 dages returret</span>
                        </div>

                        <div class="d-flex align-items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" width="16" height="16" viewBox="0 0 24 24">
                                <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"></path>
                            </svg>

                            <span>2 års garanti</span>
                        </div>

                        <div class="d-flex align-items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" width="16" height="16" viewBox="0 0 24 24">
                                <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                    <rect width="20" height="14" x="2" y="5" rx="2"></rect>
                                    <path d="M2 10h20"></path>
                                </g>
                            </svg>

                            <span>Sikker betaling</span>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int ProductId { get; set; }

    private Product? product;

    private int amount = 1;

    private ProductFormModel editProduct = new ProductFormModel();

    private bool editMode = false;

    private List<Category> categories = new();
    private List<Brand> brands = new();

    protected override async Task OnInitializedAsync()
    {
        product = await DBService.GetProductByIdAsync(ProductId);
        categories = await DBService.GetAllCategoriesAsync();
        brands = await DBService.GetAllBrandsAsync();
    }

    private List<string> GetImages()
    {
        if (product is null)
        {
            return new List<string>();
        }

        return new List<string>
        {
            product.Image ?? "/uploads/placeholder1.jpg",
            "/uploads/placeholder2.jpg",
            "/uploads/placeholder3.jpg",
            "/uploads/placeholder4.jpg",
            "/uploads/placeholder5.jpg"
        };
    }

    private void AddToCart()
    {
        if (product is null)
        {
            return;
        }

        CartService.AddToCart(Enumerable.Range(0, amount).Select(i => product));
    }

    private void NavigateBack()
    {
        int? categoryId = categories.FirstOrDefault(c => c.Id == product?.CategoryId)?.ParentCategoryId;

        if (!categoryId.HasValue)
        {
            return;
        } 

        Nav.NavigateTo($"/products/{categoryId}");
    }

    private void ToggleEditMode()
    {
        if (product is null)
        {
            return;
        }

        editMode = !editMode;

        if (!editMode)
        {
            return;
        }

        editProduct = new ProductFormModel
        {
            Id = product.Id,
            Name = product.Name,
            Description = product.Description,
            Price = product.Price,
            Color = product.Color,
            Size = product.Size,
            Quantity = product.Quantity,
            Used = product.Used,
            Image = product.Image,
            BrandId = product.BrandId,
            CategoryId = product.CategoryId,
            UserId = product.UserId
        };
    }

    private async Task HandleValidSubmit()
    {
        var ok = await DBService.UpdateProductAsync(editProduct.ToEntity());

        if (!ok)
        {
            return;
        }

        product = new Product
        {
            Id = product!.Id,
            Name = editProduct.Name,
            Description = editProduct.Description,
            Price = editProduct.Price,
            Color = editProduct.Color,
            Size = editProduct.Size,
            Quantity = editProduct.Quantity,
            Used = editProduct.Used,
            Image = editProduct.Image,
            BrandId = editProduct.BrandId,
            CategoryId = editProduct.CategoryId,
            UserId = editProduct.UserId,
            BrandName = product.BrandName,
            CategoryName = product.CategoryName,
            UserName = product.UserName
        };

        editMode = false;
    }
}
