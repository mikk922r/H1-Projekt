@page "/product-details/{ProductId:int}"
@rendermode InteractiveServer
@inherits BasePage

@inject DBService DBService
@inject NavigationManager Nav
@inject OrderService OrderService

<PageTitle>Produkt @ProductId</PageTitle>

@if (product is not null)
{
    <div class="d-flex flex-column gap-3">
        <div class="d-flex justify-content-between">
            <button class="btn btn-outline-secondary" @onclick="NavigateBack">Tilbage</button>

            @if (Auth.IsAuthenticated && Auth.CurrentUser!.Id == product.UserId)
            {
                <button class="btn btn-warning h-fit" @onclick="ToggleEditMode">@(editMode ? "Annullér" : "Rediger produkt")</button>
            }
        </div>

        <div class="d-flex gap-4">
            <ImageShowcase images="GetImages()" />

            <div class="d-flex flex-column w-50 gap-4">
                @if (editMode)
                {
                    <ProductForm Model="productForm" OnValidSubmit="HandleValidSubmit" FormName="EditProduct" />
                } 
                else
                {
                    <div>
                        <p class="text-body-seconday fs-7">@product.BrandName <span class="opacity-25">•</span> @product.CategoryName</p>

                        <h1 class="fs-2 fw-semibold mt-1 pb-1">@product.Name</h1>

                        <div class="d-flex align-items-center gap-2 mt-2">
                            <StarRating rating="ReviewsHelper.GetRoundRating(product.Reviews)" readOnly />

                            <span class="fs-7">@ReviewsHelper.GetAverageRating(product.Reviews) (@ReviewsHelper.GetTotalReviews(product.Reviews) bedømmelser)</span>
                        </div>
                    </div>

                    <h2 class="fw-semibold fs-3">@product.Price.ToString("C", CultureInfo.CurrentCulture)</h2>

                    <hr class="w-100" />

                    <div>
                        <label class="mb-2">Farve:</label>

                        <ColorSelector @bind-colors="colors" availableColors="product.Colors" single />
                    </div>

                    <div>
                        <label class="mb-2">Størrelse:</label>

                        <SizeSelector @bind-sizes="sizes" availableSizes="product.Sizes" single />
                    </div>

                    <div>
                        <label class="mb-2">Antal:</label>

                        <AmountSelector @bind-amount="amount" />
                    </div>

                    <button class="btn btn-primary d-flex align-items-center justify-content-center gap-2 w-100" @onclick="AddToCart">
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" focusable="false" width="20" height="20" viewBox="0 0 24 24">
                            <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                <circle cx="8" cy="21" r="1"></circle>
                                <circle cx="19" cy="21" r="1"></circle>
                                <path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12"></path>
                            </g>
                        </svg>

                        Læg i kurv
                    </button>

                    <hr class="w-100" />

                    <h3 class="fw-semibold fs-5 mb-1">Produktdetaljer</h3>
                    
                    <p class="text-body-seconday">@product.Description</p>

                    <div class="pt-3 border-top border-1 border-default d-flex gap-4 align-items-center fs-7">
                        <div class="d-flex align-items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="text-success" aria-hidden="true" role="img" width="16" height="16" viewBox="0 0 24 24">
                                <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 6L9 17l-5-5"></path>
                            </svg>

                            <span>På lager</span>
                        </div>

                        <div class="d-flex align-items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" width="16" height="16" viewBox="0 0 24 24">
                                <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                    <path d="M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2m10 0H9m10 0h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14"></path>
                                    <circle cx="17" cy="18" r="2"></circle>
                                    <circle cx="7" cy="18" r="2"></circle>
                                </g>
                            </svg>

                            <span>Gratis fragt</span>
                        </div>

                        <div class="d-flex align-items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" width="16" height="16" viewBox="0 0 24 24">
                                <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                    <path d="M21 12a9 9 0 0 0-9-9a9.75 9.75 0 0 0-6.74 2.74L3 8"></path>
                                    <path d="M3 3v5h5m-5 4a9 9 0 0 0 9 9a9.75 9.75 0 0 0 6.74-2.74L21 16"></path>
                                    <path d="M16 16h5v5"></path>
                                </g>
                            </svg>

                            <span>30 dages returret</span>
                        </div>

                        <div class="d-flex align-items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" width="16" height="16" viewBox="0 0 24 24">
                                <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"></path>
                            </svg>

                            <span>2 års garanti</span>
                        </div>

                        <div class="d-flex align-items-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" width="16" height="16" viewBox="0 0 24 24">
                                <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
                                    <rect width="20" height="14" x="2" y="5" rx="2"></rect>
                                    <path d="M2 10h20"></path>
                                </g>
                            </svg>

                            <span>Sikker betaling</span>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <hr class="w-100 my-5" />

    <div class="d-flex align-items-center justify-content-between">
        <div>
            <h1 class="fs-2 mb-2">Bedømmelser</h1>

            <div class="d-flex align-items-center gap-2">
                <StarRating rating="ReviewsHelper.GetRoundRating(product.Reviews)" readOnly />

                <span class="fs-7">@ReviewsHelper.GetAverageRating(product.Reviews) ud af 5 (@ReviewsHelper.GetTotalReviews(product.Reviews) bedømmelser)</span>
            </div>
        </div>

        <button class="btn btn-primary" @onclick="ToggleAddReview">@(addingReview ? "Annullér" : "Skriv en bedømmelse")</button>
    </div>

    if (addingReview) {
        <div class="card d-flex flex-column gap-2 mt-3 p-3">
            <h4 class="fs-4 fw-semibold">Skriv en bedømmelse</h4>

            <EditForm class="d-flex flex-column gap-3" Model="reviewForm" OnValidSubmit="HandleAddReview" FormName="AddReview">
                <DataAnnotationsValidator />

                <div>
                    <label class="form-label">Bedømmelse</label>

                    <StarRating @bind-rating="reviewForm.Rating" />

                    <ValidationMessage For="@(() => reviewForm.Rating)" />
                </div>

                <div>
                    <label class="form-label">Titel</label>

                    <InputText class="form-control" @bind-Value="reviewForm.Title" />

                    <ValidationMessage For="@(() => reviewForm.Title)" />
                </div>

                <div>
                    <label class="form-label">Beskrivelse</label>

                    <InputTextArea rows="5" class="form-control" @bind-Value="reviewForm.Message" />

                    <ValidationMessage For="@(() => reviewForm.Message)" />
                </div>

                <button type="submit" class="btn btn-primary">Lav bedømmelse</button>
            </EditForm>
        </div>
    }

    int reviewCount = ReviewsHelper.GetTotalReviews(product.Reviews);

    <div class="card d-flex flex-column gap-3 mt-3 p-3">
        @if (reviewCount > 0) {
            for (int i = 0; i < reviewCount; i++) {
                Review review = product.Reviews[i];

                <div class="@(i != reviewCount - 1 ? "border-bottom border-1 border-default pb-4" : "")">
                    <div class="d-flex align-items-center justify-content-between mb-3">
                        <div class="d-flex align-items-center gap-2">
                            <img src="/avatar.jpg" class="min-w-2_5rem w-2_5rem min-h-2_5rem h-2_5rem rounded-circle border border-1 border-default" />

                            <div class="d-flex flex-column">
                                <h3 class="fs-6 fw-semibold">@review.UserName</h3>

                                <span class="fs-8 text-body-secondary">@ReviewsHelper.GetTimeAgo(@review.CreatedAt)</span>
                            </div>
                        </div>

                        <div class="d-flex align-items-center gap-2">
                            <StarRating rating="@review.Rating" readOnly />

                            @if (Auth.IsAuthenticated && review.UserId == Auth.CurrentUser!.Id)
                            {
                                <button type="button" class="d-flex justify-content-center align-items-center rounded-2 text-black fs-7 min-w-2rem min-h-2rem w-2rem h-2rem border-0" @onclick="() => DeleteReview(review.Id)">
                                    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" width="16" height="16" viewBox="0 0 24 24">
                                        <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 6L6 18M6 6l12 12"></path>
                                    </svg>
                                </button>
                            }
                        </div>
                    </div>

                    <h4 class="fw-medium fs-5 mb-1">@review.Title</h4>

                    <p class="text-body-secondary">@review.Message</p>
                </div>
            }
        } 
        else
        {
            <p class="fw-semibold mx-auto">Ingen bedømmelser endnu. Vær den første til at skrive en bedømmelse!</p>
        }
    </div>
}

@code {
    [Parameter]
    public int ProductId { get; set; }

    private Product? product;

    private List<Colors> colors = new List<Colors>();
    private List<string> sizes = new List<string>();
    private int amount = 1;

    private ProductFormModel productForm = new ProductFormModel();
    private ReviewFormModel reviewForm = new ReviewFormModel();

    private bool editMode = false;
    private bool addingReview = false;

    private List<Category> categories = new();
    private List<Brand> brands = new();

    protected override async Task OnInitializedAsync()
    {
        product = await DBService.GetProductByIdAsync(ProductId);
        categories = await DBService.GetAllCategoriesAsync();
        brands = await DBService.GetAllBrandsAsync();
    }

    private List<string> GetImages()
    {
        if (product is null)
        {
            return new List<string>();
        }

        return new List<string>
        {
            product.Image ?? "/placeholder1.jpg",
            "/placeholder2.jpg",
            "/placeholder3.jpg",
            "/placeholder4.jpg",
            "/placeholder5.jpg"
        };
    }

    private void AddToCart()
    {
        if (product is null)
        {
            return;
        }

        if (colors.Count == 0 || sizes.Count == 0)
        {
            return; 
        }

        Product alteredProduct = new Product
        {
            Id = product.Id,
            Name = product.Name,
            Description = product.Description,
            Price = product.Price,
            Colors = new List<Colors>(colors),
            Sizes = new List<string>(sizes),
            Image = product.Image,
            BrandId = product.BrandId,
            CategoryId = product.CategoryId,
            UserId = product.UserId,
            BrandName = product.BrandName,
            CategoryName = product.CategoryName,
            UserName = product.UserName
        };

        CartService.AddToCart(Enumerable.Range(0, amount).Select(i => alteredProduct).ToList());
    }

    private void NavigateBack()
    {
        int? categoryId = categories.FirstOrDefault(c => c.Id == product?.CategoryId)?.ParentCategoryId;

        if (!categoryId.HasValue)
        {
            return;
        } 

        Nav.NavigateTo($"/products/{categoryId}");
    }

    private void ToggleEditMode()
    {
        if (product is null)
        {
            return;
        }

        editMode = !editMode;

        if (!editMode)
        {
            return;
        }

        productForm = new ProductFormModel
        {
            Id = product.Id,
            Name = product.Name,
            Description = product.Description,
            Price = product.Price,
            Colors = product.Colors,
            Sizes = product.Sizes,
            Image = product.Image,
            BrandId = product.BrandId,
            CategoryId = product.CategoryId,
            UserId = product.UserId
        };
    }

    private async Task HandleValidSubmit()
    {
        var ok = await DBService.UpdateProductAsync(productForm.ToEntity());

        if (!ok)
        {
            return;
        }

        product = new Product
        {
            Id = product!.Id,
            Name = productForm.Name,
            Description = productForm.Description,
            Price = productForm.Price,
            Colors = productForm.Colors,
            Sizes = productForm.Sizes,
            Image = productForm.Image,
            BrandId = productForm.BrandId,
            CategoryId = productForm.CategoryId,
            UserId = productForm.UserId,
            BrandName = product.BrandName,
            CategoryName = product.CategoryName,
            UserName = product.UserName
        };

        editMode = false;
    }

    private void ToggleAddReview()
    {
        addingReview = !addingReview;
    }

    private async Task HandleAddReview()
    {
        if (product is null)
        {
            return;
        }

        Review review = new Review
        {
            ProductId = product.Id,
            UserId = Auth.CurrentUser!.Id,
            Title = reviewForm.Title,
            Message = reviewForm.Message,
            Rating = reviewForm.Rating,
            CreatedAt = DateTime.UtcNow,
            UserName = Auth.CurrentUser.Name,
        };
        
        int? id = await DBService.AddReviewAsync(review);

        if (!id.HasValue)
        {
            return;
        }

        review.Id = id.Value;

        product.Reviews.Add(review);

        addingReview = false;

        StateHasChanged();
    }

    private async Task DeleteReview(int reviewId)
    {
        if (product is null)
        {
            return;
        }
        
        bool ok = await DBService.DeleteReviewAsync(reviewId);
        
        if (!ok)
        {
            return;
        }

        product.Reviews.RemoveAll(r => r.Id == reviewId);
    }
}
