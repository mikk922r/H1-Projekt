@page "/add-product"
@rendermode InteractiveServer
@inherits BasePage

@inject DBService DB
@inject NavigationManager Nav
@inject IWebHostEnvironment Env

<PageTitle>Tilføj Produkt</PageTitle>

<div class="d-flex gap-4 mx-auto w-100">
    <EditForm class="card flex-grow-1 shadow-sm" Model="productForm" OnValidSubmit="HandleSubmit" FormName="AddProduct">
        <DataAnnotationsValidator />

        <article class="d-flex flex-column gap-3 p-3">
            <div>
                <label class="form-label">Navn</label>

                <InputText class="form-control" @bind-Value="productForm.Name" />

                <ValidationMessage For="@(() => productForm.Name)" />
            </div>

            <div>
                <label class="form-label">Beskrivelse</label>

                <InputTextArea rows="5" class="form-control" @bind-Value="productForm.Description" />

                <ValidationMessage For="@(() => productForm.Description)" />
            </div>

            <div>
                <label class="form-label">Pris</label>

                <InputNumber class="form-control" @bind-Value="productForm.Price" />

                <ValidationMessage For="@(() => productForm.Price)" />
            </div>

            <div>
                <label class="form-label">Farve</label>

                <InputSelect class="form-select" @bind-Value="productForm.Color">
                    <option value="">-- Vælg Farve --</option>

                    @foreach (Colors color in ColorHelper.GetColors())
                    {
                        <option value="@color">@ColorHelper.GetColorName(color)</option>
                    }
                </InputSelect>

                <ValidationMessage For="@(() => productForm.Color)" />
            </div>

            <div>
                <label class="form-label">Størrelse</label>

                <InputText class="form-control" @bind-Value="productForm.Size" />

                <ValidationMessage For="@(() => productForm.Size)" />
            </div>

            <div>
                <label class="form-label">Antal</label>

                <InputNumber class="form-control" @bind-Value="productForm.Quantity" />

                <ValidationMessage For="@(() => productForm.Quantity)" />
            </div>

            <div class="form-check">
                <InputCheckbox class="form-check-input" @bind-Value="productForm.Used" />

                <label class="form-check-label">Brugt?</label>
            </div>

            <div>
                <label class="form-label">Mærke</label>

                <InputSelect class="form-select" @bind-Value="productForm.BrandId">
                    <option value="">-- Vælg Mærke --</option>

                    @foreach (Brand brand in brands)
                    {
                        <option value="@brand.Id">@brand.Name</option>
                    }
                </InputSelect>
            </div>

            <div>
                <label class="form-label">Kategori</label>

                <InputSelect class="form-select" @bind-Value="productForm.CategoryId">
                    <option value="">-- Vælg Kategori --</option>

                    @foreach (Category category in categories.Where(c => c.ParentCategoryId is null).OrderBy(x => x.Id))
                    {
                        <optgroup label="@category.Name">
                            @foreach (Category subCategory in categories.Where(sc => sc.ParentCategoryId == category.Id).OrderBy(x => x.Name))
                            {
                                <option value="@subCategory.Id">@subCategory.Name</option>
                            }
                        </optgroup>
                    }
                </InputSelect>
            </div>

            <div>
                <label class="form-label">Sælger</label>

                <InputSelect class="form-select" @bind-Value="productForm.UserId" disabled="!Auth.IsAuthenticated">
                    <option value="">-- Vælg Sælger --</option>

                    @foreach (User user in users)
                    {
                        <option value="@user.Id">@user.Name</option>
                    }
                </InputSelect>
            </div>

            <div>
                <label class="form-label">Upload Image</label>

                <InputFile OnChange="HandleFileSelected" accept="image/*" class="form-control" />
            </div>

            <button type="submit" class="btn btn-success">Tilføj</button>
        </article>
    </EditForm>

    <ProductCard product="GetPreviewProduct()" />
</div>

@code {
    private ProductForm productForm = new ProductForm();

    private List<Brand> brands = new();

    private List<Category> categories = new();

    private List<User> users = new();

    private IBrowserFile? selectedFile;

    private string? previewImageUrl;

    protected override async Task OnInitializedAsync()
    {
        brands = await DB.GetAllBrandsAsync();

        categories = await DB.GetAllCategoriesAsync();

        users = await DB.GetAllUsersAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        if (Auth.IsAuthenticated)
        {
            productForm.UserId = Auth.CurrentUser!.Id;

            return;
        }

        Nav.NavigateTo("/login");
    }

    private Product GetPreviewProduct()
    {
        return new Product
        {
            Name = !string.IsNullOrEmpty(productForm.Name) ? productForm.Name : "Navn",
            Description = productForm.Description,
            Price = productForm.Price,
            Color = productForm.Color,
            Size = productForm.Size,
            Quantity = productForm.Quantity,
            Used = productForm.Used,
            Image = previewImageUrl,
            BrandId = productForm.BrandId,
            CategoryId = productForm.CategoryId,
            UserId = Auth.IsAuthenticated ? Auth.CurrentUser!.Id : 0,
            BrandName = brands.FirstOrDefault(b => b.Id == productForm.BrandId)?.Name ?? "Mærke",
            CategoryName = categories.FirstOrDefault(c => c.Id == productForm.CategoryId)?.Name ?? "Kategori",
            UserName = Auth.IsAuthenticated ? Auth.CurrentUser!.Name : "Sælger",
        };
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        IBrowserFile file = selectedFile = e.File;

        previewImageUrl = null;

        try
        {
            await using Stream stream = file.OpenReadStream(2 * 1024 * 1024);

            byte[] buffer = new byte[file.Size];

            int read = 0;

            while (read < buffer.Length)
            {
                int chunk = await stream.ReadAsync(buffer, read, buffer.Length - read);

                if (chunk == 0)
                {
                    break;
                }

                read += chunk;
            }

            string base64 = Convert.ToBase64String(buffer);

            previewImageUrl = $"data:{file.ContentType};base64,{base64}";
        }
        catch 
        {
            return;
        }
    }

    private async Task HandleSubmit()
    {
        if (selectedFile is not null)
        {
            try
            {
                string uploadsFolder = Path.Combine(Env.WebRootPath, "uploads");

                if (!Directory.Exists(uploadsFolder))
                {
                    Directory.CreateDirectory(uploadsFolder);
                }

                string extension = Path.GetExtension(selectedFile.Name);

                string uniqueFileName = $"{Guid.NewGuid()}{extension}";

                string filePath = Path.Combine(uploadsFolder, uniqueFileName);

                await using FileStream fileStream = new FileStream(filePath, FileMode.Create);

                await selectedFile.OpenReadStream(2 * 1024 * 1024).CopyToAsync(fileStream);

                productForm.Image = Path.Combine("uploads", uniqueFileName).Replace("\\", "/");
            }
            catch 
            {
                return;
            }
        }

        int? id = await DB.AddProductAsync(productForm.ToEntity());

        if (id is null)
        {
            return;
        }

        Nav.NavigateTo($"/product-details/{id}");
    }
}
