@page "/add-product"
@rendermode InteractiveServer
@inherits BasePage

@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@using System
@inject DBService DB
@inject NavigationManager Nav
@inject IWebHostEnvironment Env

<EditForm Model="product" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText class="form-control" @bind-Value="product.Name" />
    </div>
    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputTextArea class="form-control" @bind-Value="product.Description" />
    </div>
    <div class="mb-3">
        <label class="form-label">Price</label>
        <InputNumber class="form-control" @bind-Value="product.Price" />
    </div>
    <div class="mb-3">
        <label class="form-label">Color</label>
        <InputText class="form-control" @bind-Value="product.Color" />
    </div>
    <div class="mb-3">
        <label class="form-label">Size</label>
        <InputText class="form-control" @bind-Value="product.Size" />
    </div>
    <div class="mb-3">
        <label class="form-label">Quantity</label>
        <InputNumber class="form-control" @bind-Value="product.Quantity" />
    </div>
    <div class="form-check mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="product.Used" />
        <label class="form-check-label">Used?</label>
    </div>

    <div class="mb-3">
        <label class="form-label">Brand</label>
        <InputSelect class="form-select" @bind-Value="product.BrandId">
            <option value="">-- select brand --</option>
            @foreach (var b in brands)
            {
                <option value="@b.Id">@b.Name</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Category</label>
        <InputSelect class="form-select" @bind-Value="product.CategoryId">
            <option value="">-- select category --</option>
            @foreach (var c in categories)
            {
                <option value="@c.Id">@c.Name</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Seller</label>
        <InputSelect class="form-select" @bind-Value="product.UserId" disabled="!Auth.IsAuthenticated">
            <option value="">-- select user --</option>
            @foreach (var u in users)
            {
                <option value="@u.Id">@u.Name</option>
            }
        </InputSelect>
    </div>

    <!-- ─────────── IMAGE UPLOAD SECTION ─────────── -->
    <div class="mb-3">
        <label class="form-label">Upload Image</label>
        <InputFile OnChange="HandleFileSelected" accept="image/*" class="form-control" />
        @if (!string.IsNullOrEmpty(imageUploadError))
        {
            <div class="text-danger mt-1">@imageUploadError</div>
        }
        @if (!string.IsNullOrEmpty(previewImageUrl))
        {
            <img src="@previewImageUrl"
                 class="img-thumbnail mt-2"
                 style="max-height: 200px; object-fit: contain;" />
        }
    </div>
    <!-- ───────── END IMAGE UPLOAD SECTION ──────────── -->

    <button type="submit" class="btn btn-success">
        Create Product
    </button>
</EditForm>

@code {
    private Products product = new();
    private List<Brand> brands = new();
    private List<Category> categories = new();
    private List<User> users = new();
    private bool _hasRedirected;

    // ─── FIELDS FOR IMAGE UPLOAD ───
    private IBrowserFile? selectedFile;
    private string? imageUploadError;
    private string? previewImageUrl;
    // ────────────────────────────────

    protected override async Task OnInitializedAsync()
    {
        brands = await DB.GetAllBrandsAsync();
        categories = await DB.GetAllCategoriesAsync();
        users = await DB.GetAllUsersAsync();

        if (Auth.IsAuthenticated)
        {
            product.UserId = Auth.CurrentUser!.Id;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && !_hasRedirected && !Auth.IsAuthenticated)
        {
            _hasRedirected = true;
            Nav.NavigateTo("/login");
        }
    }

    // ─── Called when user picks a file in the <InputFile> control ───
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        imageUploadError = null;
        previewImageUrl = null;
        selectedFile = null;

        var file = e.File;
        if (file == null)
        {
            imageUploadError = "No file selected.";
            return;
        }
        if (!file.ContentType.StartsWith("image/"))
        {
            imageUploadError = "Please select a valid image file.";
            return;
        }
        if (file.Size > 2 * 1024 * 1024)
        {
            imageUploadError = "Image must be smaller than 2 MB.";
            return;
        }

        selectedFile = file;

        // Use an async read instead of synchronous Read(...)
        try
        {
            // Open the stream (max 2 MB)
            await using var stream = file.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024);
            var buffer = new byte[file.Size];
            var read = 0;
            while (read < buffer.Length)
            {
                var chunk = await stream.ReadAsync(buffer, read, buffer.Length - read);
                if (chunk == 0) break;
                read += chunk;
            }

            // Convert to base64 for preview
            var base64 = Convert.ToBase64String(buffer);
            previewImageUrl = $"data:{file.ContentType};base64,{base64}";
        }
        catch (Exception ex)
        {
            imageUploadError = $"Error reading image: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        // 1) If an image was selected, save it under wwwroot/uploads/
        if (selectedFile != null)
        {
            try
            {
                // Ensure “uploads” folder exists under wwwroot
                var uploadsFolder = Path.Combine(Env.WebRootPath, "uploads");
                if (!Directory.Exists(uploadsFolder))
                    Directory.CreateDirectory(uploadsFolder);

                // Generate a GUID-based filename
                var ext = Path.GetExtension(selectedFile.Name);
                var uniqueFileName = $"{Guid.NewGuid()}{ext}";
                var filePath = Path.Combine(uploadsFolder, uniqueFileName);

                // Copy the uploaded file (max 2 MB) to “wwwroot/uploads/...”
                await using var fs = new FileStream(filePath, FileMode.Create);
                await selectedFile.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024)
                                   .CopyToAsync(fs);

                // Store the relative URL in product.Image
                // e.g. “uploads/3f50b9a2-… .jpg”
                product.Image = Path.Combine("uploads", uniqueFileName)
                                    .Replace("\\", "/");
            }
            catch (Exception ex)
            {
                imageUploadError = $"Error saving image: {ex.Message}";
                return; // Abort if image‐save fails
            }
        }

        // 2) Insert the product with its Image value (or null) into the DB
        await DB.AddProductAsync(product);

        // 3) Redirect to Home ("/")
        Nav.NavigateTo("/");
    }
}
