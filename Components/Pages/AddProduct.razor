@page "/add-product"
@rendermode InteractiveServer
@inherits BasePage

@inject DBService DB
@inject NavigationManager Nav
@inject IWebHostEnvironment Env

<PageTitle>Tilføj Produkt</PageTitle>

<div class="d-flex gap-4">
    <div class="card flex-grow-1 shadow-sm p-3">
        <ProductForm Model="productModel" OnValidSubmit="HandleSubmit" FormName="AddProduct" OnFieldChanged="() => StateHasChanged()" />
    </div>

    <ProductCard product="GetPreviewProduct(productModel)" />
</div>

@code {
    private ProductFormModel productModel = new ProductFormModel();

    private List<Brand> brands = new List<Brand>();

    private List<Category> categories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        brands = await DB.GetAllBrandsAsync();

        categories = await DB.GetAllCategoriesAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        if (!Auth.IsAuthenticated)
        {
            Nav.NavigateTo("/login");
            
            return;
        }

        productModel.UserId = Auth.CurrentUser!.Id;
    }

    private Product GetPreviewProduct(ProductFormModel productModel)
    {
        return new Product
        {
            Name = !string.IsNullOrEmpty(productModel.Name) ? productModel.Name : "Navn",
            Description = productModel.Description,
            Price = productModel.Price,
            Colors = productModel.Colors,
            Sizes = productModel.Sizes,
            Image = productModel.Image,
            BrandId = productModel.BrandId,
            CategoryId = productModel.CategoryId,
            UserId = Auth.IsAuthenticated ? Auth.CurrentUser!.Id : 0,
            BrandName = brands.FirstOrDefault(b => b.Id == productModel.BrandId)?.Name ?? "Mærke",
            CategoryName = categories.FirstOrDefault(c => c.Id == productModel.CategoryId)?.Name ?? "Kategori",
            UserName = Auth.IsAuthenticated ? Auth.CurrentUser!.Name : "Sælger",
        };
    }

    private async Task HandleSubmit()
    {
        int? id = await DB.AddProductAsync(productModel.ToEntity());

        if (id is null)
        {
            return;
        }

        Nav.NavigateTo($"/product-details/{id}");
    }
}
