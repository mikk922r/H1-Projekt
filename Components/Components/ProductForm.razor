@rendermode InteractiveServer
@inherits BasePage

@inject DBService DBService

<EditForm class="d-flex flex-column gap-3" Model="Model" OnValidSubmit="OnValidSubmit" FormName="@FormName">
    <DataAnnotationsValidator />

    <div>
        <label class="form-label">Navn</label>

        <InputText class="form-control" @bind-Value="Model.Name" @oninput="(e) => HandleFieldChanged(e.Value, Properties.Name)" />

        <ValidationMessage For="@(() => Model.Name)" />
    </div>

    <div>
        <label class="form-label">Beskrivelse</label>

        <InputTextArea rows="5" class="form-control" @bind-Value="Model.Description" @oninput="(e) => HandleFieldChanged(e.Value, Properties.Description)" />

        <ValidationMessage For="@(() => Model.Description)" />
    </div>

    <div>
        <label class="form-label">Pris</label>

        <InputNumber class="form-control" @bind-Value="Model.Price" @oninput="(e) => HandleFieldChanged(e.Value, Properties.Price)" />

        <ValidationMessage For="@(() => Model.Price)" />
    </div>

    <div>
        <label class="form-label">Farve</label>

        <ColorSelector colors="Model.Colors" colorsChanged="(value) => HandleFieldChanged(value, Properties.Colors)" />

        <ValidationMessage For="@(() => Model.Colors)" />
    </div>

    <div>
        <label class="form-label">Størrelse</label>

        <SizeSelector sizes="Model.Sizes" sizesChanged="(value) => HandleFieldChanged(value, Properties.Sizes)" />

        <ValidationMessage For="@(() => Model.Sizes)" />
    </div>

    <div>
        <label class="form-label">Mærke</label>

        <InputSelect class="form-select" @bind-Value="Model.BrandId" @oninput="(e) => HandleFieldChanged(e.Value, Properties.BrandId)">
            <option value="">-- Vælg Mærke --</option>

            @foreach (Brand brand in brands)
            {
                <option value="@brand.Id">@brand.Name</option>
            }
        </InputSelect>

        <ValidationMessage For="@(() => Model.BrandId)" />
    </div>

    <div>
        <label class="form-label">Kategori</label>

        <InputSelect class="form-select" @bind-Value="Model.CategoryId" @oninput="(e) => HandleFieldChanged(e.Value, Properties.CategoryId)">
            <option value="">-- Vælg Kategori --</option>

            @foreach (Category category in categories.Where(c => c.ParentCategoryId is null).OrderBy(x => x.Id))
            {
                <optgroup label="@category.Name">
                    @foreach (Category subCategory in categories.Where(sc => sc.ParentCategoryId == category.Id).OrderBy(x => x.Name))
                    {
                        <option value="@subCategory.Id">@subCategory.Name</option>
                    }
                </optgroup>
            }
        </InputSelect>

        <ValidationMessage For="@(() => Model.CategoryId)" />
    </div>

    <div>
        <label class="form-label">Billede</label>

        <InputFile OnChange="OnFileSelected" accept="image/*" class="form-control" />

        <ValidationMessage For="@(() => Model.Image)" />
    </div>

    @if (FormName == "AddProduct")
    {
        <button type="submit" class="btn btn-success">Tilføj</button>
    }
    else
    {
        <button type="submit" class="btn btn-success">Gem</button>
    }
</EditForm>

@code {
    [Parameter]
    public ProductFormModel Model { get; set; } = new ProductFormModel();

    [Parameter]
    public EventCallback<EditContext> OnValidSubmit { get; set; }

    [Parameter]
    public string? FormName { get; set; }

    [Parameter]
    public EventCallback OnFieldChanged { get; set; }

    private List<Brand> brands = new List<Brand>();

    private List<Category> categories = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        brands = await DBService.GetAllBrandsAsync();

        categories = await DBService.GetAllCategoriesAsync();
    }

    private async Task HandleFieldChanged(object? value, Properties propertyName)
    {
        string stringValue = value?.ToString() ?? string.Empty;

        switch (propertyName)
        {
            case Properties.Name:
                Model.Name = stringValue;

                break;
            case Properties.Description:
                Model.Description = stringValue;

                break;
            case Properties.Price:
                if (decimal.TryParse(stringValue, out decimal price))
                {
                    Model.Price = price;
                }

                break;
            case Properties.Colors:
                Model.Colors = value as List<Colors> ?? new List<Colors>();

                break;
            case Properties.Sizes:
                Model.Sizes = value as List<string> ?? new List<string>();

                break;
            case Properties.BrandId:
                if (int.TryParse(stringValue, out int brandId))
                {
                    Model.BrandId = brandId;
                }

                break;
            case Properties.CategoryId:
                if (int.TryParse(stringValue, out int categoryId))
                {
                    Model.CategoryId = categoryId;
                }

                break;
        }

        await OnFieldChanged.InvokeAsync();
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            IBrowserFile file = e.File;

            await using Stream stream = file.OpenReadStream(2 * 1024 * 1024);

            byte[] buffer = new byte[file.Size];

            int read = 0;

            while (read < buffer.Length)
            {
                int chunk = await stream.ReadAsync(buffer, read, buffer.Length - read);

                if (chunk == 0)
                {
                    break;
                }

                read += chunk;
            }

            string base64 = Convert.ToBase64String(buffer);

            Model.Image = $"data:{file.ContentType};base64,{base64}";
        }
        catch
        {
            return;
        }
    }
}
