@inject DBService DBService
@using Projekt.Components.Components

<div class="position-sticky" style="top: 1rem">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h3 class="fw-semibold">Filter</h3>

        <button class="btn btn-primary btn-sm" @onclick="Reset">Reset</button>
    </div>

    <div class="mb-2 d-flex justify-content-between">
        <h5>Pris</h5>

        <h5>@minPrice kr - @maxPrice kr</h5>
    </div>

    <DoubleRange min="0" max="10000" step="100" firstValue="@minPrice" firstValueChanged="(value) => minPriceChanged.InvokeAsync(value)" secondValue="@maxPrice" secondValueChanged="(value) => maxPriceChanged.InvokeAsync(value)" />

    <hr class="my-3" />

    <h5 class="mb-2">Mærker</h5>

    <div class="d-flex flex-column gap-2 overflow-x-hidden overflow-y-auto px-1" style="max-height: 10rem;">
        @foreach (var brand in _brands)
        {
            <label class="p-2 d-flex gap-2 align-items-center" style="margin: -8px;">
                <input class="form-check-input mt-0" type="checkbox" checked="@brands.Contains(brand)" value="@brand" @onchange="() => BrandToggled(brand)" />

                <span class="user-select-none">@brand.Name</span>
            </label>
        }
    </div>

    <hr class="my-3" />

    <h5 class="mb-2">Størelser</h5>

    <div class="d-flex flex-wrap gap-2 px-1">
        @foreach (var size in _sizes)
        {
            <label class="p-2 d-flex gap-2 align-items-center" style="margin: -8px;">
                <input class="form-check-input mt-0" type="checkbox" checked="@sizes.Contains(size)" value="@size" @onchange="() => SizeToggled(size)" />

                <span class="user-select-none">@size</span>
            </label>
        }
    </div>

    <hr class="my-3" />

    <h5 class="mb-2">Farver</h5>

    <div class="d-flex flex-wrap gap-2 px-1">
        @foreach (var color in _colors)
        {
            <button type="button" class="btn color @(GetColorClass(color) + (colors.Contains(color) ? " active" : ""))" @onclick="() => ToggleColor(color)"></button>
        }
    </div>
</div>

@code {
    private List<Brand> _brands = new List<Brand>();
    private List<string> _sizes = new List<string> { "XS", "S", "M", "L", "XL", "XXL" };
    private List<Colors> _colors = Enum.GetValues(typeof(Colors)).Cast<Colors>().ToList();

    [Parameter]
    public int minPrice { get; set; } = 0;

    [Parameter]
    public EventCallback<int> minPriceChanged { get; set; }

    [Parameter]
    public int maxPrice { get; set; } = 10000;

    [Parameter]
    public EventCallback<int> maxPriceChanged { get; set; }

    [Parameter]
    public List<Brand> brands { get; set; } = new List<Brand>();

    [Parameter]
    public EventCallback<List<Brand>> brandsChanged { get; set; }

    [Parameter]
    public List<string> sizes { get; set; } = new List<string>();

    [Parameter]
    public EventCallback<List<string>> sizesChanged { get; set; }

    [Parameter]
    public List<Colors> colors { get; set; } = new List<Colors>();

    [Parameter]
    public EventCallback<List<Colors>> colorsChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _brands = await DBService.GetAllBrandsAsync();
    }

    private void Reset()
    {
        minPrice = 0;
        maxPrice = 10000;

        minPriceChanged.InvokeAsync(minPrice);
        maxPriceChanged.InvokeAsync(maxPrice);

        brands.Clear();
        sizes.Clear();
        colors.Clear();

        brandsChanged.InvokeAsync(brands);
        sizesChanged.InvokeAsync(sizes);
        colorsChanged.InvokeAsync(colors);
    }

    private void BrandToggled(Brand brand)
    {
        if (brands.Contains(brand))
        {
            brands.Remove(brand);
        }
        else
        {
            brands.Add(brand);
        }

        brandsChanged.InvokeAsync(brands);
    }

    private void SizeToggled(string size)
    {
        if (sizes.Contains(size))
        {
            sizes.Remove(size);
        }
        else
        {
            sizes.Add(size);
        }

        sizesChanged.InvokeAsync(sizes);
    }

    private void ToggleColor(Colors color)
    {
        if (colors.Contains(color))
        {
            colors.Remove(color);
        }
        else
        {
            colors.Add(color);
        }

        colorsChanged.InvokeAsync(colors);
    }

    private string GetColorClass(Colors color)
    {
        return Enum.GetName(typeof(Colors), color)?.ToLowerInvariant() ?? string.Empty;
    }
}


