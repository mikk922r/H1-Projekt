@inject DBService DBService

<div id="filter" class="position-sticky card rounded-4 p-3 h-fit shadow-sm" style="top: 8rem">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <h3 class="fw-semibold">Filter</h3>

        <button class="btn btn-primary btn-sm" @onclick="Reset">Nulstil</button>
    </div>

    <div class="mb-2 d-flex justify-content-between">
        <h5>Pris</h5>

        <h5>@minPrice.ToString("C", CultureInfo.CurrentCulture) - @maxPrice.ToString("C", CultureInfo.CurrentCulture)</h5>
    </div>

    <DoubleRange min="0" max="100000" step="100" firstValue="minPrice" firstValueChanged="(value) => minPriceChanged.InvokeAsync(value)" secondValue="maxPrice" secondValueChanged="(value) => maxPriceChanged.InvokeAsync(value)" />

    <hr class="my-3" />

    <h5 class="mb-2">Mærker</h5>

    <div class="d-flex flex-column gap-2 overflow-x-hidden overflow-y-auto px-1" style="max-height: 20rem;">
        @foreach (Brand brand in _brands)
        {
            <label class="p-2 d-flex gap-2 align-items-center" style="margin: -8px;">
                <input class="form-check-input mt-0" type="checkbox" checked="@brands.Contains(brand)" value="@brand" @onchange="() => BrandToggled(brand)" />

                <span class="user-select-none">@brand.Name</span>
            </label>
        }
    </div>

    <hr class="my-3" />

    <h5 class="mb-2">Størrelser</h5>

    <SizeSelector sizes="sizes" sizesChanged="(value) => sizesChanged.InvokeAsync(value)" />

    <hr class="my-3" />

    <h5 class="mb-2">Farver</h5>

    <ColorSelector colors="colors" colorsChanged="(value) => colorsChanged.InvokeAsync(value)" />
</div>

@code {
    private List<Brand> _brands = new List<Brand>();

    [Parameter]
    public int minPrice { get; set; } = 0;

    [Parameter]
    public EventCallback<int> minPriceChanged { get; set; }

    [Parameter]
    public int maxPrice { get; set; } = 100000;

    [Parameter]
    public EventCallback<int> maxPriceChanged { get; set; }

    [Parameter]
    public List<Brand> brands { get; set; } = new List<Brand>();

    [Parameter]
    public EventCallback<List<Brand>> brandsChanged { get; set; }

    [Parameter]
    public List<string> sizes { get; set; } = new List<string>();

    [Parameter]
    public EventCallback<List<string>> sizesChanged { get; set; }

    [Parameter]
    public List<Colors> colors { get; set; } = new List<Colors>();

    [Parameter]
    public EventCallback<List<Colors>> colorsChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _brands = await DBService.GetAllBrandsAsync();
    }

    private void Reset()
    {
        minPrice = 0;
        maxPrice = 100000;

        minPriceChanged.InvokeAsync(minPrice);
        maxPriceChanged.InvokeAsync(maxPrice);

        brands.Clear();
        sizes.Clear();
        colors.Clear();

        brandsChanged.InvokeAsync(brands);
        sizesChanged.InvokeAsync(sizes);
        colorsChanged.InvokeAsync(colors);
    }

    private void BrandToggled(Brand brand)
    {
        if (brands.Contains(brand))
        {
            brands.Remove(brand);
        }
        else
        {
            brands.Add(brand);
        }

        brandsChanged.InvokeAsync(brands);
    }

    
}


